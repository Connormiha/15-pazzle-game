{"version":3,"sources":["components/app/app.module.sass","components/field/field.module.sass","components/field-item/field-item.module.sass","components/controls/controls.module.sass","components/common/button/button.module.sass","components/common/text-input/text-input.module.sass","reducers/schema.ts","lib/utils/utils.ts","flux/field/field.ts","flux/constants.ts","components/field-item/field-item.tsx","components/field/field.tsx","components/common/button/button.tsx","components/common/text-input/text-input.tsx","components/controls/controls.tsx","components/app/app.tsx","flux/game/game.ts","reducers/index.ts","store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","app","app__field","field","field-item","field-item_empty","controls","controls__label","controls__form","controls__count","button","button_size_small","button_size_medium","button_size_large","text-input","text-input__input","text-input__input_invalid","text-input__input_size_small","text-input__input_size_medium","text-input__input_size_large","schema","game","state","history","position","generateField","size","result","totalSize","i","push","arrayShuffle","arr","length","j","Math","random","_ref","moveFieldItem","fieldPosition","target","index","indexOf","newPosition","getNewPosition","newField","slice","_ref2","width","sqrt","row","col","generate","type","b","bem","style","FieldItem","_handleClick","_this","props","onClick","id","react_default","a","createElement","className","empty","this","disabled","isDisabled","React","PureComponent","Field","_this$props","onMove","map","Fragment","key","field_item_FieldItem","_renderItems","Button","children","rest","Object","objectWithoutProperties","assign","TextInput","invalid","Controls","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_handleChangeSize","e","setState","fieldSizeValue","value","_handleSubmitSize","preventDefault","onChangeSize","parseInt","String","fieldSize","onSubmit","onChange","min","max","step","button_Button","historyCount","onMoveBack","_renderFieldSizeForm","_renderHistoryCount","App","onStartGame","prevProps","isWin","onWin","alert","controls_Controls","_renderControls","field_Field","Component","connect","dispatch","batchActions","fieldActions","combineReducers","arguments","undefined","concat","createAppStore","createStore","enableBatching","reducers","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","render","es","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7ea82a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__2bOu3\",\"app__field\":\"app_app__field__3J5SI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"field_field__2e5J0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field-item\":\"field-item_field-item__k-jgj\",\"field-item_empty\":\"field-item_field-item_empty__pNdk1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"controls_controls__3HuPR\",\"controls__label\":\"controls_controls__label__2rx-9\",\"controls__form\":\"controls_controls__form__2pyWq\",\"controls__count\":\"controls_controls__count__5NdmP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__3ZrMc\",\"button_size_small\":\"button_button_size_small__2szLC\",\"button_size_medium\":\"button_button_size_medium__1FngU\",\"button_size_large\":\"button_button_size_large__1XCe6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"text-input_text-input__1Ippd\",\"text-input__input\":\"text-input_text-input__input__2n4O8\",\"text-input__input_invalid\":\"text-input_text-input__input_invalid__2GIIF\",\"text-input__input_size_small\":\"text-input_text-input__input_size_small__3GWzP\",\"text-input__input_size_medium\":\"text-input_text-input__input_size_medium__2ChTl\",\"text-input__input_size_large\":\"text-input_text-input__input_size_large__KK1-e\"};","import {IGameStore, IFieldStore} from 'flux/types';\n\nexport interface ISchema {\n    readonly game: IGameStore;\n    readonly field: IFieldStore;\n}\n\nconst schema: ISchema = {\n    game: {\n        state: 'not-started'\n    },\n    field: {\n        history: [],\n        position: []\n    }\n};\n\nexport default schema;\n","export const generateField = (size: number): number[] => {\n    const result = [];\n    const totalSize = size * size;\n\n    for (let i = 0; i < totalSize; i++) {\n        result.push(i);\n    }\n\n    arrayShuffle(result);\n\n    return result;\n};\n\nconst arrayShuffle = (arr: number[]): void => {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = (Math.random() * (i + 1)) | 0;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n};\n\nexport const isCanMove = (fieldPosition: number[], target: number): boolean =>\n    target !== getNewPosition(fieldPosition, target);\n\nexport const moveFieldItem = (fieldPosition: number[], target: number): number[] => {\n    const index = fieldPosition.indexOf(target);\n    const newPosition = getNewPosition(fieldPosition, index);\n    const newField = fieldPosition.slice();\n    [newField[index], newField[newPosition]] = [newField[newPosition], newField[index]];\n\n    return newField;\n};\n\nconst getNewPosition = (fieldPosition: number[], target: number): number => {\n    const width = Math.sqrt(fieldPosition.length);\n    const row = target / width | 0;\n    const col = target % width;\n\n    if (col > 0 && fieldPosition[target - 1] === 0) {\n        return target - 1;\n    }\n\n    if (col < width - 1 && fieldPosition[target + 1] === 0) {\n        return target + 1;\n    }\n\n    if (row > 0 && fieldPosition[target - width] === 0) {\n        return target - width;\n    }\n\n    if (row < width - 1 && fieldPosition[target + width] === 0) {\n        return target + width;\n    }\n\n    return target;\n};\n\nexport const isWin = (fieldPosition: number[]): boolean => {\n    for (let i = 0; i < fieldPosition.length - 1; i++) {\n        if (i + 1 !== fieldPosition[i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n","import schema from 'reducers/schema';\nimport {IFieldStore} from 'flux/types';\nimport {FIELD_MOVE, FIELD_MOVE_BACK, FIELD_GENERATE} from 'flux/constants';\nimport {AnyAction} from 'redux';\nimport {moveFieldItem, generateField} from 'lib/utils';\n\nexport const generate = (size: number): AnyAction =>\n    ({type: FIELD_GENERATE, size});\n\nexport const move = (target: number): AnyAction =>\n    ({type: FIELD_MOVE, target});\n\nexport const moveBack = (): AnyAction =>\n    ({type: FIELD_MOVE_BACK});\n\nconst getDefaultState = (): IFieldStore =>\n    schema.field;\n\nexport default (state: IFieldStore = getDefaultState(), {type, target, size}: AnyAction): IFieldStore => {\n    switch (type) {\n        case FIELD_GENERATE:\n            return {\n                position: generateField(size),\n                history: state.history\n            };\n\n        case FIELD_MOVE:\n            return {\n                position: moveFieldItem(state.position, target),\n                history: state.history.concat(target)\n            };\n\n        case FIELD_MOVE_BACK:\n            return {\n                position: moveFieldItem(state.position, state.history[state.history.length - 1]),\n                history: state.history.slice(0, -1)\n            };\n    }\n\n    return state;\n};\n","export const GAME_START = 'GAME_START';\nexport const GAME_WIN = 'GAME_WIN';\nexport const GAME_FAIL = 'GAME_FAIL';\n\nexport const FIELD_GENERATE = 'FIELD_GENERATE';\nexport const FIELD_MOVE = 'FIELD_MOVE';\nexport const FIELD_MOVE_BACK = 'FIELD_MOVE_BACK';\n","import style from './field-item.module.sass';\nimport React from 'react';\nimport bem from 'bem-css-modules';\n\nconst b = bem(style);\n\ninterface IFieldItemProps {\n    isDisabled: boolean;\n    onClick: (id: number) => void;\n    id: number;\n}\n\nexport default class FieldItem extends React.PureComponent<IFieldItemProps> {\n    private _handleClick = (): void => {\n        this.props.onClick(this.props.id);\n    }\n\n    render(): React.ReactNode {\n        return (\n            <button\n                className={b({empty: this.props.id === 0})}\n                disabled={this.props.isDisabled}\n                onClick={this._handleClick}\n            >\n                {this.props.id}\n            </button>\n        );\n    }\n}","import style from './field.module.sass';\nimport React from 'react';\nimport FieldItem from 'components/field-item';\nimport {isCanMove} from 'lib/utils';\nimport bem from 'bem-css-modules';\n\nconst b = bem(style);\n\ninterface IFieldItemProps {\n    field: number[];\n    onMove: (id: number) => void;\n}\n\nexport default class Field extends React.PureComponent<IFieldItemProps> {\n    private _renderItems(): React.ReactNode {\n        const {field, onMove} = this.props;\n        const size = Math.sqrt(field.length);\n\n        return field.map((id: number, i: number) =>\n            (\n                <React.Fragment key={id}>\n                    <FieldItem\n                        id={id}\n                        isDisabled={!isCanMove(field, i)}\n                        onClick={onMove}\n                    />\n                    {((i + 1) % size === 0) && <div />}\n                </React.Fragment>\n            )\n        );\n    }\n\n    render(): React.ReactNode {\n        return (\n            <article\n                className={b()}\n            >\n                {this._renderItems()}\n            </article>\n        );\n    }\n}\n","import style from './button.module.sass';\nimport React from 'react';\nimport bem from 'bem-css-modules';\n\nconst b = bem(style);\n\nexport type IButtonSize = 'small' | 'medium' | 'large';\nexport type IButtonType = 'button' | 'submit' | 'reset';\nexport type IButtonStyle = 'transparent' | 'color';\n\ninterface IButtonProps {\n    size: IButtonSize;\n    disabled?: boolean;\n    type?: IButtonType;\n    tabIndex?: number;\n    ariaLabel?: string;\n    onClick?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nexport default class Button extends React.PureComponent<IButtonProps> {\n    render(): React.ReactNode {\n        const {size, children, ...rest} = this.props;\n\n        return (\n            <button\n                {...rest}\n                className={b({size})}\n            >\n                {children}\n            </button>\n        );\n    }\n}\n","import style from './text-input.module.sass';\nimport React from 'react';\nimport bem from 'bem-css-modules';\n\nconst b = bem(style);\n\nexport type ITextInputSize = 'small' | 'medium' | 'large';\nexport type ITextInputType = 'text' | 'password' | 'number' | 'tel' | 'email';\n\nexport interface ITextInputProps {\n    invalid?: boolean;\n    size: ITextInputSize;\n    value: string;\n    type?: ITextInputType;\n    maxLength?: number;\n    autoComplete?: string;\n    min?: number;\n    max?: number;\n    step?: number;\n    pattern?: string;\n    placeholder?: string;\n    disabled?: boolean;\n    readOnly?: boolean;\n    required?: boolean;\n    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;\n    onClick?: React.MouseEventHandler<HTMLInputElement>;\n    onChange?: React.ChangeEventHandler<HTMLInputElement>;\n    onFocus?: React.FocusEventHandler<HTMLInputElement>;\n    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;\n    onBlur?: React.FocusEventHandler<HTMLInputElement>;\n    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;\n}\n\nexport default function TextInput(props: ITextInputProps): React.ReactElement {\n    const {size, invalid, ...rest} = props;\n\n    return (\n        <div className={b()}>\n            <input\n                className={b('input', {size, invalid})}\n                {...rest}\n            />\n        </div>\n    );\n}\n","import style from './controls.module.sass';\nimport React from 'react';\nimport Button from 'components/common/button';\nimport TextInput from 'components/common/text-input';\nimport bem from 'bem-css-modules';\n\nconst b = bem(style);\n\ninterface IControlsProps {\n    historyCount: number;\n    fieldSize: number;\n    onMoveBack(): void;\n    onChangeSize(size: number): void;\n}\n\ninterface IControlsState {\n    fieldSizeValue: string;\n}\n\nexport default class Controls extends React.PureComponent<IControlsProps, IControlsState> {\n    constructor(props: IControlsProps) {\n        super(props);\n\n        this.state = {\n            fieldSizeValue: String(props.fieldSize)\n        };\n    }\n\n    private _handleChangeSize = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            fieldSizeValue: e.target.value\n        });\n    }\n\n    private _handleSubmitSize = (e: React.SyntheticEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        this.props.onChangeSize(parseInt(this.state.fieldSizeValue, 10));\n    }\n\n    private _renderFieldSizeForm(): React.ReactNode {\n        return (\n            <form\n                onSubmit={this._handleSubmitSize}\n                className={b('form')}\n            >\n                <label className={b('label')}>\n                    Размер поля\n                    <TextInput\n                        value={this.state.fieldSizeValue}\n                        onChange={this._handleChangeSize}\n                        type=\"number\"\n                        size=\"small\"\n                        min={2}\n                        max={100}\n                        step={1}\n                    />\n                </label>\n                <Button\n                    size=\"medium\"\n                >\n                    Применить\n                </Button>\n            </form>\n        );\n    }\n\n    private _renderHistoryCount(): React.ReactNode {\n        return (\n            <div className={b('count')}>\n                {'Число ходов: '}\n                <b>\n                    {this.props.historyCount}\n                </b>\n            </div>\n        );\n    }\n\n    render(): React.ReactNode {\n        const {historyCount, onMoveBack} = this.props;\n\n        return (\n            <section\n                className={b()}\n            >\n                <Button\n                    disabled={historyCount === 0}\n                    onClick={onMoveBack}\n                    size=\"medium\"\n                >\n                    Ход назад\n                </Button>\n                {this._renderFieldSizeForm()}\n                {this._renderHistoryCount()}\n            </section>\n        );\n    }\n}\n","import style from './app.module.sass';\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {Dispatch} from 'redux';\nimport {ISchema} from 'reducers/schema';\nimport {IFieldStore, IGameStore} from 'flux/types';\nimport * as gameActions from 'flux/game';\nimport * as fieldActions from 'flux/field';\nimport Field from 'components/field';\nimport Controls from 'components/controls';\nimport {isWin} from 'lib/utils';\nimport {batchActions} from 'redux-batched-actions';\nimport bem from 'bem-css-modules';\n\nconst b = bem(style);\n\nconst DEFAULT_FIELD_SIZE = 4;\n\ninterface IAppProps {\n    field: IFieldStore;\n    game: IGameStore;\n    onStartGame(size: number): void;\n    onMove(id: number): void;\n    onMoveBack(): void;\n    onWin(): void;\n}\n\nclass App extends React.Component<IAppProps> {\n    componentDidMount(): void {\n        this.props.onStartGame(DEFAULT_FIELD_SIZE);\n    }\n\n    componentDidUpdate(prevProps: IAppProps): void {\n        const {position} = this.props.field;\n\n        if (position !== prevProps.field.position && isWin(position)) {\n            this.props.onWin();\n        }\n\n        if (this.props.game.state === 'win' && prevProps.game.state !== 'win') {\n            alert('Победили!!!');\n        }\n    }\n\n    private _renderControls(): React.ReactNode {\n        const {onMoveBack, onStartGame, field} = this.props;\n\n        if (!field.position.length) {\n            return null;\n        }\n\n        return (\n            <Controls\n                onMoveBack={onMoveBack}\n                onChangeSize={onStartGame}\n                fieldSize={Math.sqrt(field.position.length)}\n                historyCount={field.history.length}\n            />\n        );\n    }\n\n    render(): React.ReactNode {\n        return (\n            <div className={b()}>\n                {this._renderControls()}\n                <div className={b('field')}>\n                    <Field\n                        field={this.props.field.position}\n                        onMove={this.props.onMove}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        onStartGame(size: number): void {\n            dispatch(\n                batchActions([\n                    gameActions.start(),\n                    fieldActions.generate(size)\n                ])\n            );\n        },\n\n        onMove(id: number): void {\n            dispatch(\n                batchActions([\n                    fieldActions.move(id)\n                ])\n            );\n        },\n\n        onMoveBack(): void {\n            dispatch(\n                batchActions([\n                    fieldActions.moveBack()\n                ])\n            );\n        },\n\n        onWin(): void {\n            dispatch(\n                batchActions([\n                    gameActions.win()\n                ])\n            );\n        }\n    };\n};\n\nexport default connect(\n    (state: ISchema) => state,\n    mapDispatchToProps\n)(App);\n","import schema from 'reducers/schema';\nimport {IGameStore} from 'flux/types';\nimport {GAME_WIN, GAME_FAIL, GAME_START} from 'flux/constants';\nimport {AnyAction} from 'redux';\n\nexport const start = (): AnyAction =>\n    ({type: GAME_START});\n\nexport const fail = (): AnyAction =>\n    ({type: GAME_FAIL});\n\nexport const win = (): AnyAction =>\n    ({type: GAME_WIN});\n\nconst getDefaultState = (): IGameStore =>\n    schema.game;\n\nexport default (state: IGameStore = getDefaultState(), {type}: AnyAction): IGameStore => {\n    switch (type) {\n        case GAME_START:\n            return {\n                state: 'in-progress'\n            };\n\n        case GAME_WIN:\n            return {\n                state: 'win'\n            };\n\n        case GAME_FAIL:\n            return {\n                state: 'fail'\n            };\n    }\n\n    return state;\n};\n","import {combineReducers} from 'redux';\nimport game from 'flux/game';\nimport field from 'flux/field';\n\nexport default combineReducers({\n    game,\n    field\n});\n","import reducers from './reducers';\nimport {createStore} from 'redux';\nimport {enableBatching} from 'redux-batched-actions';\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\n\nexport const createAppStore = () =>\n    createStore(enableBatching(reducers), composeWithDevTools());\n\nexport default createAppStore();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/app';\nimport {Provider} from 'react-redux';\nimport store from 'store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    (\n        <Provider store={store}>\n            <App />\n        </Provider>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}